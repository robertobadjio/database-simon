// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/database.go
//
// Generated by this command:
//
//	mockgen -source=./internal/database/database.go -destination=./internal/database/database_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	compute "database-simon/internal/database/compute"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockcomputeLayer is a mock of computeLayer interface.
type MockcomputeLayer struct {
	ctrl     *gomock.Controller
	recorder *MockcomputeLayerMockRecorder
	isgomock struct{}
}

// MockcomputeLayerMockRecorder is the mock recorder for MockcomputeLayer.
type MockcomputeLayerMockRecorder struct {
	mock *MockcomputeLayer
}

// NewMockcomputeLayer creates a new mock instance.
func NewMockcomputeLayer(ctrl *gomock.Controller) *MockcomputeLayer {
	mock := &MockcomputeLayer{ctrl: ctrl}
	mock.recorder = &MockcomputeLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcomputeLayer) EXPECT() *MockcomputeLayerMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcomputeLayer) Parse(ctx context.Context, queryStr string) (compute.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, queryStr)
	ret0, _ := ret[0].(compute.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockcomputeLayerMockRecorder) Parse(ctx, queryStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcomputeLayer)(nil).Parse), ctx, queryStr)
}

// MockstorageLayer is a mock of storageLayer interface.
type MockstorageLayer struct {
	ctrl     *gomock.Controller
	recorder *MockstorageLayerMockRecorder
	isgomock struct{}
}

// MockstorageLayerMockRecorder is the mock recorder for MockstorageLayer.
type MockstorageLayerMockRecorder struct {
	mock *MockstorageLayer
}

// NewMockstorageLayer creates a new mock instance.
func NewMockstorageLayer(ctrl *gomock.Controller) *MockstorageLayer {
	mock := &MockstorageLayer{ctrl: ctrl}
	mock.recorder = &MockstorageLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageLayer) EXPECT() *MockstorageLayerMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockstorageLayer) Del(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockstorageLayerMockRecorder) Del(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockstorageLayer)(nil).Del), arg0, arg1)
}

// Get mocks base method.
func (m *MockstorageLayer) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockstorageLayerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockstorageLayer)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockstorageLayer) Set(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockstorageLayerMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockstorageLayer)(nil).Set), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/storage/wal/logs_writer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/database/storage/wal/logs_writer.go -destination=./internal/database/storage/wal/logs_writer_mock.go -package=wal
//

// Package wal is a generated GoMock package.
package wal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mocksegment is a mock of segment interface.
type Mocksegment struct {
	ctrl     *gomock.Controller
	recorder *MocksegmentMockRecorder
	isgomock struct{}
}

// MocksegmentMockRecorder is the mock recorder for Mocksegment.
type MocksegmentMockRecorder struct {
	mock *Mocksegment
}

// NewMocksegment creates a new mock instance.
func NewMocksegment(ctrl *gomock.Controller) *Mocksegment {
	mock := &Mocksegment{ctrl: ctrl}
	mock.recorder = &MocksegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksegment) EXPECT() *MocksegmentMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *Mocksegment) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MocksegmentMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mocksegment)(nil).Write), arg0)
}
